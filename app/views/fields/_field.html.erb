<%# params: field %>
<%# A new/editable/destroyable table header for a given field.
Used in layers/rows, broadcast from FieldsController and from Field hooks. %>

<%# If there are several layers, there are several “new field” form. We use the layer to identify the element.
    This is used for the form namespace so that radio buttons and checkbox labels identify the right items,
    as well as when broadcasting a new column before this one in Field#after_create_commit.
    Additionally, the form_id is necessary because the submit button is outside of the form element. %>
<% element_id = field.persisted? ? dom_id(field) : dom_id(field.layer, :new_field) %>
<% form_id = field.persisted? ? dom_id(field, :form) : dom_id(field.layer, :new_field_form) %>

<th id="<%= element_id %>" class="dropdown" aria-haspopup="true"
    data-controller="dropdown"
    data-dropdown-target="trigger"
    data-action="click->dropdown#toggle"
    data-dropdown-offset-value="-1">

  <span class="layer-table__header chevron">
    <%= field.label || "+" %>
  </span>

  <div class="dropdown__content" role="menu" data-dropdown-target="content">
    <%= form_with model: field, namespace: element_id, id: form_id do |form| %>
      <%# Disable the whole form in unauthorized. cf LayerPolicy#update?> %>
      <fieldset class="card__main-content" data-restricted-target="restricted" data-restricted-authorizations="<%= %w[owner editor].to_json %>">
        <% if field.new_record? %>
          <h3 class="form__header"><%= t("helpers.link.field.new") %></h3>
        <% end %>
        <%= form.hidden_field :layer_id %>
        <%= form.text_field :label, class: "form__field form__field--slim form__text-field" %>

        <div class="form__field form__field--slim">
          <%= form.collection_radio_buttons(:field_type, Field.field_types.keys,
                :to_s, -> { Field.human_attribute_name("field_types.#{_1}") },
                include_hidden: false) do |radio| %>
            <%# show the radio only if the field is new, or if this radio is the field type %>
            <%# field type can only be set initially %>
            <% if field.new_record? || field.field_type == radio.object %>
              <%= radio.label do %>
                <%= radio.radio_button class: "field-form__type-radio", required: field.new_record?, disabled: field.persisted? %>
                <%= radio.text %>
                <% if radio.object == "enum" %>
                  <div class="field-form__type-param form__field form__field--slim" data-controller="enum-values">
                    <template data-enum-values-target="template">
                      <%= form.text_field :enum_values, value: nil, multiple: true, placeholder: t("helpers.placeholder.field.enum_value"), data: {enum_values_target: "value", action: "input->enum-values#valueInput"} %>
                    </template>
                    <% field.enum_values&.each do |val| %>
                      <%= form.text_field :enum_values, value: val, multiple: true, placeholder: t("helpers.placeholder.field.enum_value"), data: {enum_values_target: "value", action: "input->enum-values#valueInput"} %>
                    <% end %>
                  </div>
                <% elsif radio.object == "territory" %>
                  <div class="field-form__type-param form__field form__field--slim">
                    <%= form.collection_check_boxes(:territory_category_ids, TerritoryCategory.all,
                          :id, :to_s,
                          include_hidden: false) do |check| %>
                      <%= check.label do %>
                        <%= check.check_box(disabled: field.persisted?) %>
                        <%= check.text %>
                      <% end %>
                    <% end %>
                  </div>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        </div>
      </fieldset>
    <% end %>

    <div class="card__footer-content">
      <%= submit_tag t("helpers.submit.field.update"), class: "button button--slim button--confirm", form: form_id %>
      <%# Don’t display the delete button for new fields, and disable it if unauthorized. cf LayerPolicy#update? %>
      <% if field.persisted? %>
        <%= button_to field, method: :delete, class: "button button--slim button--delete",
              data: {restricted_target: "restricted", restricted_authorizations: %w[owner editor].to_json} do %>
          <%= t("helpers.link.field.delete") %>
        <% end %>
      <% end %>
    </div>
  </div>
</th>
