<%# params: field %>
<%# A new/editable/destroyable table header for a given field.
Used in layers/rows, broadcast from FieldsController and from Field hooks. %>

<th id="<%= dom_id(field) %>" class="dropdown" aria-haspopup="true"
    data-controller="dropdown"
    data-dropdown-target="trigger"
    data-action="click->dropdown#toggle"
    data-dropdown-offset-value="-1">

  <span class="layer-table__header chevron">
    <%= field.label || "+" %>
  </span>

  <div class="dropdown__content" role="menu" data-dropdown-target="content">
    <%# The namespace option makes sure the labels identify the radio buttons in the right forms %>
    <%= form_with model: field, namespace: dom_id(field), class: "field" do |form| %>
      <%# Disable the whole form in unauthorized. cf LayerPolicy#update?> %>
      <fieldset data-restricted-target="restricted" data-restricted-authorizations="<%= %w[owner editor].to_json %>">
        <% if field.new_record? %>
          <h3><%= t("helpers.link.field.new") %></h3>
        <% end %>
        <%= form.hidden_field :layer_id %>
        <%= form.text_field :label %>

        <%= form.collection_radio_buttons(:field_type, Field.field_types.keys,
              :to_s, -> { Field.human_attribute_name("field_types.#{_1}") },
              include_hidden: false) do |radio| %>
          <%= radio.label(class: "radio") do %>
            <%= radio.radio_button required: field.new_record?, disabled: field.persisted? %> <%# field type can only be set initially %>
            <%= radio.text %>

            <%# if the field is new, or if this radio is the field type, show detailed field params %>
            <% if field.new_record? || field.field_type == radio.object %>
              <div class="field-type-parameters">
                <% if radio.object == "enum" %>
                  <div data-controller="enum-values">
                    <template data-enum-values-target="template">
                      <%= form.text_field :enum_values, value: nil, multiple: true, placeholder: t("helpers.placeholder.field.enum_value"), data: {enum_values_target: "value", action: "input->enum-values#valueInput"} %>
                    </template>
                    <% field.enum_values&.each do |val| %>
                      <%= form.text_field :enum_values, value: val, multiple: true, placeholder: t("helpers.placeholder.field.enum_value"), data: {enum_values_target: "value", action: "input->enum-values#valueInput"} %>
                    <% end %>
                  </div>
                <% elsif radio.object == "territory" %>
                  <%= form.collection_check_boxes(:territory_category_ids, TerritoryCategory.all,
                        :id, :to_s,
                        include_hidden: false) do |check| %>
                    <div><%= check.label { check.check_box(disabled: field.persisted?) + check.text } %></div>
                  <% end %>
                <% end %>
              </div>
            <% end %>
          <% end %>
        <% end %>

        <%= form.submit class: "primary-action" %>
      </fieldset>
    <% end %>

    <%# Donâ€™t display the delete button for new fields, and disable it if unauthorized. cf LayerPolicy#update? %>
    <% if field.persisted? %>
      <%= button_to field, method: :delete, class: "delete-action",
            data: {restricted_target: "restricted", restricted_authorizations: %w[owner editor].to_json} do %>
        <%= t("helpers.link.field.delete") %>
      <% end %>
    <% end %>
  </div>
</th>
